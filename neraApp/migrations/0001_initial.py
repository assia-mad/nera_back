# Generated by Django 4.0.3 on 2022-10-16 22:54

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.CharField(blank=True, max_length=150, null=True)),
                ('tel', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'only numbers are allowed')])),
                ('image', models.ImageField(blank=True, null=True, upload_to='profile_images/', verbose_name='user_img')),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Client', 'Client'), ('influencer', 'influencer')], default=('Client', 'Client'), max_length=30)),
                ('gender', models.CharField(blank=True, choices=[('féminin', 'féminin'), ('masculin', 'masculin')], max_length=30, null=True)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('language', models.CharField(choices=[('arabe', 'arabe'), ('français', 'français'), ('anglais', 'anglais')], default='anglais', max_length=10)),
                ('dark_mode', models.BooleanField(default=False)),
                ('qte_purchased', models.PositiveIntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Categorie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categorie_images/', verbose_name='categorie_img')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CodePromo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('used_one_time', models.BooleanField(default=True)),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=4)),
                ('type', models.CharField(choices=[('normal', 'normal'), ('influencer', 'influencer')], default=('normal', 'normal'), max_length=30)),
                ('date_limit', models.DateField()),
                ('influencer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='code_promo_influencer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=7, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CommuneCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_price', models.PositiveIntegerField()),
                ('commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_commune', to='neraApp.commune')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('image', models.ImageField(blank=True, null=True, upload_to='company_images/', verbose_name='company_images')),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='news_images/', verbose_name='news_image')),
            ],
        ),
        migrations.CreateModel(
            name='Panier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detailed_place', models.CharField(max_length=150)),
                ('postal_code', models.PositiveIntegerField()),
                ('state', models.CharField(choices=[('payé', 'payé'), ('non payé', 'non payé')], default='non payé', max_length=50)),
                ('tel', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'only numbers are allowed')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='panier', to='neraApp.commune')),
                ('commune_delivery', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='panier', to='neraApp.communecompany')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=100)),
                ('regular_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('disc_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('disc_per', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('gender', models.CharField(choices=[('féminin', 'féminin'), ('masculin', 'masculin'), ('mixte', 'mixte')], default=('mixte', 'mixte'), max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('available_colors', models.ManyToManyField(related_name='product_colours', to='neraApp.color')),
            ],
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='type_images/', verbose_name='type_img')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activate_gifts', models.BooleanField(default=True)),
                ('qte_to_win', models.PositiveIntegerField(default=5)),
            ],
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_add', models.GenericIPAddressField()),
                ('last_visit', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Wilaya',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist', to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(related_name='whishlists', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubCategorie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='sub_categorie_images/', verbose_name='sub_categorie_img')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('categories', models.ManyToManyField(related_name='sub_categorie', to='neraApp.categorie')),
            ],
        ),
        migrations.CreateModel(
            name='StopDesk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('delivery_price', models.PositiveIntegerField()),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stop_desks', to='neraApp.company')),
                ('wilaya', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stop_desks', to='neraApp.wilaya')),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_accepted', models.BooleanField(default=False)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_sent', to=settings.AUTH_USER_MODEL)),
                ('wishlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request', to='neraApp.wishlist')),
            ],
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='product_images/')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_images', to='neraApp.product')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='available_sizes',
            field=models.ManyToManyField(related_name='product_sizes', to='neraApp.size'),
        ),
        migrations.AddField(
            model_name='product',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='product',
            name='sub_categorie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_sub_categorie', to='neraApp.subcategorie'),
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(related_name='Product', to='neraApp.tag'),
        ),
        migrations.AddField(
            model_name='product',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_type', to='neraApp.producttype'),
        ),
        migrations.CreateModel(
            name='PaymentConfirm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_code', models.CharField(blank=True, max_length=150, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='payment_confirm/', verbose_name='payment_confirm')),
                ('accept_payment', models.BooleanField(default=False)),
                ('panier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment_confirm', to='neraApp.panier')),
            ],
        ),
        migrations.AddField(
            model_name='panier',
            name='desk_delivery',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='panier', to='neraApp.stopdesk'),
        ),
        migrations.AddField(
            model_name='panier',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='panier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='panier',
            name='wilaya',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='panier', to='neraApp.wilaya'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('non_traitée', 'non_traitée'), ('Traitée', 'Traitée'), ('annulée', 'annulée')], default=('non_traitée', 'non_traitée'), max_length=50)),
                ('price_to_pay', models.DecimalField(decimal_places=2, max_digits=10)),
                ('color', models.CharField(max_length=7)),
                ('size', models.CharField(max_length=10)),
                ('qte', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('code_promo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='neraApp.codepromo')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('panier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='neraApp.panier')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_ordered', to='neraApp.product')),
                ('wishlist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='neraApp.wishlist')),
            ],
        ),
        migrations.CreateModel(
            name='Gift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rarity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100)])),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gift', to='neraApp.product')),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Favoritelist', to=settings.AUTH_USER_MODEL)),
                ('products', models.ManyToManyField(related_name='favorite_products', to='neraApp.product')),
            ],
        ),
        migrations.CreateModel(
            name='EasterEgg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='easter_egg_gift', to='neraApp.gift')),
                ('winner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='easter_egg', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='communecompany',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Commune', to='neraApp.company'),
        ),
        migrations.AddField(
            model_name='commune',
            name='wilaya',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Commune', to='neraApp.wilaya'),
        ),
        migrations.AddField(
            model_name='codepromo',
            name='products',
            field=models.ManyToManyField(related_name='code_promo_products', to='neraApp.product'),
        ),
        migrations.AddField(
            model_name='codepromo',
            name='subCategories',
            field=models.ManyToManyField(related_name='code_promo_sub_categories', to='neraApp.subcategorie'),
        ),
        migrations.AddField(
            model_name='codepromo',
            name='users',
            field=models.ManyToManyField(related_name='code_promo_users', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='categorie',
            name='types',
            field=models.ManyToManyField(related_name='categories', to='neraApp.producttype'),
        ),
    ]
